package s_gestion_usuarios.servidor;

import s_gestion_usuarios.sop_corba.*;
import s_seguimiento_usuarios.sop_corba.*;
import s_seguimiento_usuarios.sop_corba.GestionNotificacionesPackage.*;
import org.omg.CosNaming.NamingContextPackage.*;
import org.omg.CORBA.BooleanHolder;
import org.omg.CosNaming.*;
import s_gestion_usuarios.sop_corba.GestionPersonalPackage.*;

import java.util.ArrayList;

/**
* sop_corba/GesAnteproyectosOperations.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from ges_ant.idl
* martes 9 de julio de 2019 06:45:59 AM COT
*/

public class GestionPersonalImpl implements GestionPersonalOperations {

	private ArrayList<personalDTO> personal;

  	GestionNotificaciones ref;
  
	public GestionPersonalImpl(){
		this.personal = new ArrayList<>();
		String tipoId = "CC";
        int id = 6536;
        String nombrecompleto = "Josefino Eusebio De las Nieves";
        String ocupacion = "Admin";
        String usuario = "admin12345";
        String clave = "12345678";
        personalDTO admin = new personalDTO(tipoId, id, nombrecompleto, ocupacion, usuario, clave);
        personal.add(admin);
	}
	
  
 
	public void consultarReferenciaRemota(NamingContextExt nce, String servicio){
		//GestionNotificaciones ref;
		try{
		this.ref = GestionNotificacionesHelper.narrow(nce.resolve_str(servicio));
		System.out.println("Obtenido el manejador sobre el servidor de objetos: " + ref);
		}catch(Exception ex){
		System.out.println("Error: "+ex.getMessage());
		}  	
	}



	@Override
	public void registrarPersonal(personalDTO objPersonal, BooleanHolder res) {
		System.out.println("Entrando a registrar usuario");
		res.value=false;
		if(personal.size() < 3)
		{            
			res.value=personal.add(objPersonal);
			System.out.println("Usuario registrado: \n \t identificaciÃ³n: " + objPersonal.getId() + ",\n \t  nombres: " + objPersonal.getNombreCompleto());
		}
		
	}



	@Override
	public boolean consultarPersonal(int id, personalDTOHolder objPersonal) {
		System.out.println("Entrando a consultar usuario");
		boolean respuesta = false;
		int contador = 0;
		personalDTO vacio = new personalDTO();
		while(contador<personal.size()){
			if(personal.get(contador).getId()==id){
				vacio=personal.get(contador);
				respuesta = true;
				break;
			}
			contador++;
		}

		objPersonal.value=vacio;
		return respuesta; 
	}



	@Override
	public int abrirSesion(CredencialDTO objCredencial) {
		NotificacionDTO tmpNotificacion = ocupacionBuscadaCredenciales(objCredencial);
		String ocupacion = tmpNotificacion.getOcupacion();
		switch(ocupacion){
			case "Admin":
				return 0;
			case "Personal de acondicionamiento fisico":
				NotificacionDTO notificacion = tmpNotificacion;
				ref.notificarRegistro(notificacion);
				return 1;
			case "Secretaria":
				return 2;
		}
		return -1;
	}

	public NotificacionDTO ocupacionBuscadaCredenciales(CredencialDTO objCredencial){
        if(!usuarioExiste(objCredencial)){
            return null;
        }
        String tmpUsuario=objCredencial.getUsuario();
        for (personalDTO personalDTO : personal) {
            if(personalDTO.getUsuario().equals(tmpUsuario)){
                NotificacionDTO notificacion=new NotificacionDTO(personalDTO.getNombreCompleto(), personalDTO.getOcupacion());
                return notificacion;
            }
        }
        return null;
    }
	
	public boolean usuarioExiste(CredencialDTO objCredencial){
        String tmpUsuario=objCredencial.getUsuario();
        for (personalDTO personalDTO : personal) {
            if(personalDTO.getUsuario().equals(tmpUsuario)){
                return true;
            }
        }
        return false;
    }
} 
